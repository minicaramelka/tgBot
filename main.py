import telebot
import random
from telebot import types
import requests
from bs4 import BeautifulSoup
from pymongo import MongoClient

bot = telebot.TeleBot('5221238098:AAH-npa53iKoxwghCGNr0IXZsvvwgAVCGJE')

##############################
# class DataBase:
#         def __init__(self):
#             cluster = MongoClient("mongodb+srv://user:12345@cluster0.yatjx.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")
#             self.db = cluster["bdBot"]
#             self.users = self.db["Users"]
#             self.questions = self.db["Test"]
#             self.questions_count = len(list(self.questions.find({})))
#
#         def get_user(self, chat_id):
#             user = self.users.find_one({"chat_id": chat_id})
#             if user is not None:
#                 return user
#             user = {
#                 "chat_id": chat_id,
#                 "is_passing": False,
#                 "is_passed": False,
#                 "question_index": None,
#                 "answers": []
#             }
#             self.users.insert_one(user)
#             return user
#
#         def set_user(self, chat_id, update):
#             self.users.update_one({"chat_id": chat_id}, {"$set": update})
#
#         def get_question(self, index):
#             return self.questions.find_one({"id": index})
#
# db = DataBase()
##########################################

@bot.message_handler(commands=['start'])
def start(message):
    mess = f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>, –º–µ–Ω—è —Å–æ–∑–¥–∞–ª –õ–µ—à–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –µ–º—É –±—ã–ª–æ –æ—á–µ–Ω—å —Å–∫—É—á–Ω–æ'
    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏")
    item2 = types.KeyboardButton("–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å: 10 —Ñ–∞–∫—Ç–æ–≤ –æ –õ–µ—à–µ")
    item3 = types.KeyboardButton("–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç")
    item4 = types.KeyboardButton("–ö–∞–∑–∏–Ω–æ")
    markup.add(item1, item2, item3, item4)
    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)

@bot.message_handler(commands=['help'])
def help(message):
    mess = f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —É–º–µ—é –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã(–æ–Ω–∏ –µ—Å—Ç—å –≤ –º–µ–Ω—é —Å–Ω–∏–∑—É —Å–ª–µ–≤–∞), –∞ —Ç–∞–∫–∂–µ –¥–≤–∞ –ø—Ä–∏–∫–æ–ª–∞(–∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤–∏–¥–∏—à—å —Å–Ω–∏–∑—É). –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –õ–µ—à–µ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–Ω —Å–∞–º —ç—Ç–æ —Å–ª–æ–º–∞–ª'
    bot.send_message(message.chat.id, mess, parse_mode='html')

@bot.message_handler(content_types=['text'])
def get_user_text(message):
    if message.text == '–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏':
        # keyboard
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton("–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏", callback_data='toss')
        item2 = types.InlineKeyboardButton("–ù–µ —Ö–æ—á—É", callback_data='noGo')
        markup.add(item1, item2)
        bot.send_message(message.chat.id,
                         "–ò–≥—Ä–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è, –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∞—Å –∫–∏–Ω–µ—Ç –ø–∞—Ä—É –∏–≥—Ä–∞–ª—å–Ω—ã—Ö –∫–æ—Å—Ç–µ–π, —É –∫–æ–≥–æ —Å—É–º–º–∞ –æ—á–∫–æ–≤ –±–æ–ª—å—à–µ, —Ç–æ—Ç –∫—Ä—É—Ç–æ–π",
                         parse_mode='html', reply_markup=markup)
    elif message.text == '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å: 10 —Ñ–∞–∫—Ç–æ–≤ –æ –õ–µ—à–µ':
        bot.send_message(message.chat.id, "–≠—Ç–æ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç((", parse_mode='html')
        ######################################
        # user = db.get_user(message.chat.id)
        #
        # if user["is_passed"]:
        #     bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. –í—Ç–æ—Ä–æ–π —Ä–∞–∑ –ø—Ä–æ–π—Ç–∏ –Ω–µ–ª—å–∑—è üò•")
        #     return
        #
        # if user["is_passing"]:
        #     return
        #
        # db.set_user(message.chat.id, {"question_index": 0, "is_passing": True})
        #
        # user = db.get_user(message.chat.id)
        # post = get_question_message(user)
        # if post is not None:
        #     bot.send_message(message.from_user.id, post["text"], reply_markup=post["keyboard"])
        ####################################

    elif message.text == '–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç':
        #url = 'https://anekdotbar.ru/'
        #response = requests.get(url)
        #soup = BeautifulSoup(response.text, 'lxml')
        #quotes = soup.find_all('div', class_='tecst')
        #randomFun = random.randint(0, len(quotes)-1)
        #mess = quotes[randomFun].text.split("\n")
        #bot.send_message(message.chat.id, mess[1], parse_mode='html')
        bot.send_message(message.chat.id, "–≠—Ç–æ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç((", parse_mode='html')
    elif message.text == "–ö—É" or message.text == "–ü—Ä–∏–≤–µ—Ç":
        bot.send_message(message.chat.id, "–ù—É –ø—Ä–∏–≤–µ—Ç ", parse_mode='html')
    elif message.text == '–ö–∞–∑–∏–Ω–æ':
        # keyboard
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton("–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏", callback_data='play')
        item2 = types.InlineKeyboardButton("–ù–µ —Ö–æ—á—É", callback_data='noGo')
        markup.add(item1, item2)
        bot.send_message(message.chat.id,
                         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ –õ–∞—Å-–í–µ–≥–∞—Å–∞, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∞–≤—Ç–æ–º–∞—Ç —Å–æ —Å–ª–æ—Ç–∞–º–∏",
                         parse_mode='html', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–°–æ—Ä–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é", parse_mode='html')

############################################

# @bot.callback_query_handler(func=lambda query: query.data.startswith("?ans"))
# def answered(query):
#     user = db.get_user(query.message.chat.id)
#
#     if user["is_passed"] or not user["is_passing"]:
#         return
#
#     user["answers"].append(int(query.data.split("&")[1]))
#     db.set_user(query.message.chat.id, {"answers": user["answers"]})
#
#     post = get_answered_message(user)
#     if post is not None:
#         bot.edit_message_text(post["text"], query.message.chat.id, query.message.id, reply_markup=post["keyboard"])
#
# @bot.callback_query_handler(func=lambda query: query.data == "?next")
# def next(query):
#     user = db.get_user(query.message.chat.id)
#
#     if user["is_passed"] or not user["is_passing"]:
#         return
#
#     user["question_index"] += 1
#     db.set_user(query.message.chat.id, {"question_index": user["question_index"]})
#
#     post = get_question_message(user)
#     if post is not None:
#         bot.edit_message_text(post["text"], query.message.chat.id, query.message.id, reply_markup=post["keyboard"])
#
#
# def get_question_message(user):
#     if user["question_index"] == db.questions_count:
#         count = 0
#         for question_index, question in enumerate(db.questions.find({})):
#             if question["correct"] == user["answers"][question_index]:
#                 count += 1
#         percents = round(100 * count / db.questions_count)
#
#         if percents < 30:
#             smile = "üò•"
#         elif percents < 60:
#             smile = "üòê"
#         elif percents < 85:
#             smile = "üòÄ"
#         else:
#             smile = "üòé"
#
#         text = f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {percents}% –≤–æ–ø—Ä–æ—Å–æ–≤ {smile}"
#
#         db.set_user(user["chat_id"], {"is_passed": True, "is_passing": False})
#
#         return {
#             "text": text,
#             "keyboard": None
#         }
#
#     question = db.get_question(user["question_index"])
#
#     if question is None:
#         return
#
#     keyboard = telebot.types.InlineKeyboardMarkup()
#     for answer_index, answer in enumerate(question["answers"]):
#         keyboard.row(telebot.types.InlineKeyboardButton(f"{chr(answer_index + 97)}) {answer}", callback_data=f"?ans&{answer_index}"))
#
#     text = f"–í–æ–ø—Ä–æ—Å ‚Ññ{user['question_index'] + 1}\n\n{question['text']}"
#
#     return {
#         "text": text,
#         "keyboard": keyboard
#     }
#
# def get_answered_message(user):
#     question = db.get_question(user["question_index"])
#
#     text = f"–í–æ–ø—Ä–æ—Å ‚Ññ{user['question_index'] + 1}\n\n{question['text']}\n"
#
#     for answer_index, answer in enumerate(question["answers"]):
#         text += f"{chr(answer_index + 97)}) {answer}"
#
#         if answer_index == question["correct"]:
#             text += " ‚úÖ"
#         elif answer_index == user["answers"][-1]:
#             text += " ‚ùå"
#
#         text += "\n"
#
#     keyboard = telebot.types.InlineKeyboardMarkup()
#     keyboard.row(telebot.types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="?next"))
#
#     return {
#         "text": text,
#         "keyboard": keyboard
#     }
#####################################################################

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'toss':
                botToss1 = random.randint(0, 100) % 6 + 1
                botToss2 = random.randint(0, 100) % 6 + 1
                yourToss1 = random.randint(0, 100) % 6 + 1
                yourToss2 = random.randint(0, 100) % 6 + 1
                botRes = botToss1 + botToss2
                yourRes = yourToss1 + yourToss2
                if botRes > yourRes:
                    # keyboard
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    item1 = types.InlineKeyboardButton("–î–∞–≤–∞–π", callback_data='toss')
                    item2 = types.InlineKeyboardButton("–ù–µ —Ö–æ—á—É", callback_data='noGo')
                    markup.add(item1, item2)
                    mess = f'üé≤ –£ —Ç–µ–±—è –≤—ã–ø–∞–ª–æ: {yourToss1} –∏ {yourToss2}\nüé≤ –£ –º–µ–Ω—è –≤—ã–ø–∞–ª–æ: {botToss1} –∏ {botToss2} \n–Ø –ø–æ–±–µ–¥–∏–ª üòä\n –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?'
                    bot.send_message(call.message.chat.id, mess, parse_mode='html', reply_markup=markup)
                elif botRes < yourRes:
                    # keyboard
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    item1 = types.InlineKeyboardButton("–î–∞–≤–∞–π", callback_data='toss')
                    item2 = types.InlineKeyboardButton("–ù–µ —Ö–æ—á—É", callback_data='noGo')
                    markup.add(item1, item2)
                    mess = f'üé≤ –£ —Ç–µ–±—è –≤—ã–ø–∞–ª–æ: {yourToss1} –∏ {yourToss2} \nüé≤ –£ –º–µ–Ω—è –≤—ã–ø–∞–ª–æ: {botToss1} –∏ {botToss2} \n–¢—ã –ø–æ–±–µ–¥–∏–ª üòä\n–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?'
                    bot.send_message(call.message.chat.id, mess, parse_mode='html', reply_markup=markup)
                elif botRes == yourRes:
                    # keyboard
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    item1 = types.InlineKeyboardButton("–î–∞–≤–∞–π", callback_data='toss')
                    item2 = types.InlineKeyboardButton("–ù–µ —Ö–æ—á—É", callback_data='noGo')
                    markup.add(item1, item2)
                    mess = f'üé≤ –£ —Ç–µ–±—è –≤—ã–ø–∞–ª–æ: {yourToss1} –∏ {yourToss2} \nüé≤ –£ –º–µ–Ω—è –≤—ã–ø–∞–ª–æ: {botToss1} –∏ {botToss2} \n–ù–∏—á—å—è üòä\n–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?'
                    bot.send_message(call.message.chat.id, mess, parse_mode='html', reply_markup=markup)
                # remove inline buttons
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏", reply_markup=None)

            elif call.data == 'noGo':
                bot.send_message(call.message.chat.id, '–ù—É, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ üò¢')
                # remove inline buttons
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=None)

            elif call.data == 'play':
                first_row = [0] * 5
                second_row = [0] * 5
                third_row = [0] * 5
                smile_list = ["üçë", "üçå", "üçì", "üçç", "üçí", "üçã"]
                for i in range(len(first_row)):
                    random_smile = random.randint(0, len(smile_list) - 1)
                    first_row[i] = smile_list[random_smile]
                    random_smile = random.randint(0, len(smile_list) - 1)
                    second_row[i] = smile_list[random_smile]
                    random_smile = random.randint(0, len(smile_list) - 1)
                    third_row[i] = smile_list[random_smile]
                show_result = f'\n {first_row}\n {second_row}\n {third_row}\n'
                bot.send_message(call.message.chat.id, show_result, parse_mode='html')

                koef = 0
                if first_row[0] == first_row[1] == first_row[2] == first_row[3] == first_row[4]:  # tier 1
                    koef += 10
                    win = '\n' + str(first_row[0]) + " " + str(first_row[1]) + " " + str(first_row[2]) + " " + str(first_row[3]) + " " + str(first_row[4]) + "–í—ã–∏–≥—Ä–∞—à–Ω–∞—è –∫–æ–º–±–∞" + '\n'
                    bot.send_message(call.message.chat.id, win, parse_mode='html')
                elif second_row[0] == second_row[1] == second_row[2] == second_row[3] == second_row[4]:  # tier 1
                    koef += 10
                    win = '\n' + str(second_row[0]) + " " + str(second_row[1]) + " " + str(second_row[2]) + " " + str(
                        second_row[3]) + " " + str(second_row[4]) + "–í—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∞" + '\n'
                    bot.send_message(call.message.chat.id, win, parse_mode='html')
                elif third_row[0] == third_row[1] == third_row[2] == third_row[3] == third_row[4]:  # tier 1
                    koef += 10
                    win = '\n' + str(third_row[0]) + " " + str(third_row[1]) + " " + str(third_row[2]) + " " + str(
                        third_row[3]) + " " + str(third_row[4]) + "–í—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∞" + '\n'
                    bot.send_message(call.message.chat.id, win, parse_mode='html')
                elif first_row[0] == second_row[1] == third_row[2] == second_row[3] == first_row[4]:  # tier 2
                    koef += 20
                    win = '\n' + str(first_row[0]) + " " + " " + " " + str(first_row[4]) + '\n' + " " + str(
                        second_row[1]) + " " + str(second_row[3]) + " " + '\n' + " " + " " + str(
                        third_row[2]) + " " + " " + "–í—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∞" + '\n'
                    bot.send_message(call.message.chat.id, win, parse_mode='html')
                elif third_row[0] == second_row[1] == first_row[2] == second_row[3] == third_row[4]:  # tier 2
                    koef += 20
                    win = '\n' + " " + " " + str(first_row[2]) + " " + " " + '\n' + " " + str(
                        second_row[1]) + " " + str(second_row[3]) + " " + '\n' + str(third_row[0]) + " " + " " + " " \
                          + str(third_row[4]) + "–í—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∞" + '\n'
                    bot.send_message(call.message.chat.id, win, parse_mode='html')
                elif second_row[0] == first_row[1] == second_row[2] == third_row[3] == second_row[4]:  # tier 3
                    koef += 30
                    win = '\n' + "  " + str(first_row[1]) + "  " + "  " + "  " + '\n' + str(second_row[0]) + "  " + str(
                        second_row[2]) \
                          + "  " + str(second_row[4]) + '\n' + "  " + "  " + "  " + str(
                        third_row[3]) + "  " + "–í—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∞" + '\n'
                    bot.send_message(call.message.chat.id, win, parse_mode='html')
                if koef == 0:
                    # keyboard
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    item1 = types.InlineKeyboardButton("–î–∞–≤–∞–π", callback_data='play')
                    item2 = types.InlineKeyboardButton("–ù–µ —Ö–æ—á—É", callback_data='noGo')
                    markup.add(item1, item2)
                    lose = "–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ üòâ"
                    bot.send_message(call.message.chat.id, lose, parse_mode='html', reply_markup=markup)
                else:
                    # keyboard
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    item1 = types.InlineKeyboardButton("–î–∞–≤–∞–π", callback_data='play')
                    item2 = types.InlineKeyboardButton("–ù–µ —Ö–æ—á—É", callback_data='noGo')
                    markup.add(item1, item2)
                    result = f'"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é üëè"\n"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{str(koef)}</b>'
                    bot.send_message(call.message.chat.id, result, parse_mode='html')

            # elif call.data == 'go':
            #     user = db.get_user(message.chat.id)
            #     if user["is_passed"]:
            #         bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. –í—Ç–æ—Ä–æ–π —Ä–∞–∑ –ø—Ä–æ–π—Ç–∏ –Ω–µ–ª—å–∑—è üò•")
            #         return

            #     if user["is_passing"]:
            #         return

            #     db.set_user(message.chat.id, {"question_index": 0, "is_passing": True})
            #     user = db.get_user(message.chat.id)
            #     post = get_question_message(user)
            #     if post is not None:
            #         bot.send_message(message.from_user.id, post["text"], reply_markup=post["keyboard"])
                #bot.send_message(call.message.chat.id, '–≠—Ç–æ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç((', parse_mode='html')
                #bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                #                          text="–°–æ—Ä—è–Ω", reply_markup=None)
                #while answ < 3:
                #    #keyboard
                #    markup = types.InlineKeyboardMarkup(row_width=2)
                #    item1 = types.InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data='trueAnswer')
                #    item2 = types.InlineKeyboardButton("–õ–æ–∂—å", callback_data='falseAnswer')
                #    markup.add(item1, item2)
                #    if answ == 0:
                #        bot.send_message(call.message.chat.id, '–í–æ–ø—Ä–æ—Å 1', parse_mode='html', reply_markup=markup)
                #    elif answ == 1:
                #        bot.send_message(call.message.chat.id, '–í–æ–ø—Ä–æ—Å 2', parse_mode='html', reply_markup=markup)
                #    elif answ == 2:
                #        bot.send_message(call.message.chat.id, '–í–æ–ø—Ä–æ—Å 3', parse_mode='html', reply_markup=markup)
            #elif call.data == 'trueAnswer':
            #    res = res + 1
            #    answ = answ + 1
            #    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
            #                          text="–í–µ—Ä–Ω–æ", reply_markup=None)
            #elif call.data == 'falseAnswer':
            #    answ = answ + 1
            #    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
            #                          text="–ù–µ–≤–µ—Ä–Ω–æ", reply_markup=None)

            # show alert
            # bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")

    except Exception as e:
        print(repr(e))

bot.polling()
